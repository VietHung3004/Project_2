import streamlit as st
import numpy as np
import pandas as pd
import joblib

# === CSS ƒë·ªÉ l√†m giao di·ªán ƒë·∫πp h∆°n ===
st.markdown("""
    <style>
        .main {
            background-color: #f9f9f9;
            padding: 20px;
        }
        h1 {
            color: #1f77b4;
            text-align: center;
        }
        .block-container {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
    </style>
""", unsafe_allow_html=True)

st.title("ü©∫ D·ª± ƒêo√°n Ung Th∆∞ Ph·ªïi B·∫±ng Machine Learning")

# === Load scaler ===
try:
    scaler = joblib.load('scaler.pkl')
except FileNotFoundError:
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y file 'scaler.pkl'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
    st.stop()

# === Load model ===
def load_model(model_name):
    filename = model_name.replace(' ', '_') + '_best_model.pkl'
    try:
        model = joblib.load(filename)
        return model
    except FileNotFoundError:
        raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y file model: '{filename}'.")

# === Danh s√°ch ƒë·∫∑c tr∆∞ng ===
feature_names = ['AGE', 'SMOKING', 'EXPOSURE_TO_POLLUTION', 'ENERGY_LEVEL', 'BREATHING_ISSUE',
                 'THROAT_DISCOMFORT', 'OXYGEN_SATURATION', 'SMOKING_FAMILY_HISTORY', 'STRESS_IMMUNE']

# === Nh·∫≠p li·ªáu ƒë·∫ßu v√†o (chia layout) ===
st.markdown("### üìã Nh·∫≠p th√¥ng tin ng∆∞·ªùi d√πng")

col1, col2, col3 = st.columns(3)

with col1:
    AGE = st.number_input("Tu·ªïi", min_value=0, max_value=120, value=30)
    SMOKING = st.radio("H√∫t thu·ªëc?", [0, 1], format_func=lambda x: "Kh√¥ng" if x == 0 else "C√≥")

with col2:
    EXPOSURE_TO_POLLUTION = st.radio("√î nhi·ªÖm m√¥i tr∆∞·ªùng?", [0, 1], format_func=lambda x: "Kh√¥ng" if x == 0 else "C√≥")
    BREATHING_ISSUE = st.radio("Kh√≥ th·ªü?", [0, 1], format_func=lambda x: "Kh√¥ng" if x == 0 else "C√≥")
    THROAT_DISCOMFORT = st.radio("ƒêau h·ªçng?", [0, 1], format_func=lambda x: "Kh√¥ng" if x == 0 else "C√≥")

with col3:
    ENERGY_LEVEL = st.slider("M·ª©c nƒÉng l∆∞·ª£ng", 23.26, 83.05, 40.0)
    OXYGEN_SATURATION = st.number_input("ƒê·ªô b√£o h√≤a Oxy (%)", min_value=89.92, max_value=99.80, value=95.0)
    SMOKING_FAMILY_HISTORY = st.radio("Gia ƒë√¨nh c√≥ ng∆∞·ªùi h√∫t thu·ªëc?", [0, 1], format_func=lambda x: "Kh√¥ng" if x == 0 else "C√≥")
    STRESS_IMMUNE = st.radio("Mi·ªÖn d·ªãch y·∫øu do cƒÉng th·∫≥ng?", [0, 1], format_func=lambda x: "Kh√¥ng" if x == 0 else "C√≥")

# === Ch·ªçn m√¥ h√¨nh ===
model_option = st.selectbox("ü§ñ Ch·ªçn m√¥ h√¨nh d·ª± ƒëo√°n", [
    "DecisionTree", "Random Forest", "K-Nearest Neighbor", "Bayes", "XGBoost", "Logistic Regression", "SVM"
])

# === D·ª± ƒëo√°n ===
if st.button("üîç D·ª± ƒëo√°n"):
    X_input = pd.DataFrame([[
        AGE, SMOKING, EXPOSURE_TO_POLLUTION, ENERGY_LEVEL, BREATHING_ISSUE,
        THROAT_DISCOMFORT, OXYGEN_SATURATION, SMOKING_FAMILY_HISTORY, STRESS_IMMUNE
    ]], columns=feature_names)

    try:
        X_scaled = scaler.transform(X_input)
        model = load_model(model_option)
        pred = model.predict(X_scaled)
        result = "üü¢ Kh√¥ng m·∫Øc" if pred[0] == 0 else "üî¥ C√≥ kh·∫£ nƒÉng m·∫Øc"
        st.success(f"**K·∫øt qu·∫£:** {result}")

        if hasattr(model, "predict_proba"):
            proba = model.predict_proba(X_scaled)[0, 1]
            st.info(f"**X√°c su·∫•t m·∫Øc b·ªánh:** {proba:.2%}")
    except Exception as e:
        st.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")
